service: aws-scheduler-api
useDotenv: true

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 256
  timeout: 10
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
      Resource:
        Fn::GetAtt:
          - SchedulerTable
          - Arn
    - Effect: 'Allow'
      Action:
        - states:StartExecution
      Resource: ${env:STATE_MACHINE_ARN}
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: 20201221

plugins:
  - serverless-bundle
  - serverless-s3-deploy

custom:
  bundle:
    linting: false
  dotenv:
    file: true
  assets:
    auto: true
    targets:
      - bucket:
          Ref: S3Bucket
        files:
          - source: ./docs/
            globs: 'swagger.yaml'

functions:
  submitLambda:
    handler: src/submit-lambda.handler
    events:
      - http:
          path: schedule
          method: post
      - http:
          path: schedule/docs
          method: get
      - http:
          path: health
          method: get
    environment:
      TABLE_NAME: ${env:TABLE_NAME}
      STATE_MACHINE_ARN: ${env:STATE_MACHINE_ARN}
      S3_BUCKET: ${env:S3_BUCKET}

resources:
  Resources:
    SchedulerTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${env:TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${env:S3_BUCKET}
        AccessControl: Private
